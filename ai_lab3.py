# -*- coding: utf-8 -*-
"""AI Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EIiChrc3oTm6wKUgnpvjZ3Jtp5_c4UF3
"""

from collections import deque

graph = {
    "Karachi": ["Hyderabad", "Quetta"],
    "Hyderabad": ["Karachi", "Sukkur"],
    "Sukkur": ["Hyderabad", "Multan"],
    "Multan": ["Sukkur", "Lahore", "Quetta"],
    "Lahore": ["Multan", "Islamabad"],
    "Islamabad": ["Lahore", "Peshawar"],
    "Peshawar": ["Islamabad", "Quetta"],
    "Quetta": ["Karachi", "Multan", "Peshawar"]
}

def bfs(graph, start):
    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        city = path[-1]

        if city not in visited:
            print("BFS Visit:", city)
            visited.add(city)

            for neighbor in graph[city]:
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

# -------------------
# DFS Implementation
# -------------------
def dfs(graph, start):
    visited = set()
    stack = [[start]]

    while stack:
        path = stack.pop()
        city = path[-1]

        if city not in visited:
            print("DFS Visit:", city)
            visited.add(city)

            for neighbor in graph[city]:
                new_path = list(path)
                new_path.append(neighbor)
                stack.append(new_path)

# -------------------
# Run the algorithms
# -------------------
print("Breadth First Search (BFS):")
bfs(graph, "Karachi")

print("\nDepth First Search (DFS):")
dfs(graph, "Karachi")