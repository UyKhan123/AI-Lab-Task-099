# -*- coding: utf-8 -*-
"""A* Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r4jajMfhIWs_-OqM3AwetuuYp4XXcruQ
"""

import heapq

# Weighted graph (cities with distances)
graph = {
    "Lahore": {"Islamabad": 280, "Faisalabad": 160},
    "Islamabad": {"Lahore": 280, "Peshawar": 170},
    "Faisalabad": {"Lahore": 160, "Multan": 210},
    "Multan": {"Faisalabad": 210, "Karachi": 890},
    "Peshawar": {"Islamabad": 170},
    "Karachi": {"Multan": 890}
}

# Heuristic values (estimated cost to reach Karachi)
heuristic = {
    "Lahore": 1200,
    "Islamabad": 1150,
    "Faisalabad": 1000,
    "Multan": 700,
    "Peshawar": 1300,
    "Karachi": 0
}

def a_star(graph, start, goal, heuristic):
    """
    A* search returns (path, total_cost) or (None, inf) if no path found.
    We store paths in the priority queue together with their f-cost = g + h.
    """
    open_list = []  # priority queue (min-heap) storing tuples (f_cost, path_list)
    # push the start node. g(start)=0 so f = 0 + h(start) = h(start)
    heapq.heappush(open_list, (heuristic[start], [start]))
    g_costs = {start: 0}  # dictionary to store best-known g(n) costs
    closed_set = set()    # nodes whose best cost is finalized

    # loop until there are no nodes left to expand
    while open_list:
        f, path = heapq.heappop(open_list)  # pop node with smallest f(n)
        node = path[-1]                     # current node is the last in the path

        # goal test
        if node == goal:
            return path, g_costs[node]

        # skip if we already finalized this node
        if node in closed_set:
            continue

        closed_set.add(node)  # mark node as finalized

        # iterate through neighbors and edge costs
        for neighbor, cost in graph[node].items():
            tentative_g = g_costs[node] + cost  # g through current node to neighbor

            # if neighbor unseen or we found a cheaper g, update
            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic.get(neighbor, float('inf'))
                new_path = path + [neighbor]
                heapq.heappush(open_list, (f_cost, new_path))

    # if open_list empties without reaching goal => no path
    return None, float('inf')

start_city = "Lahore"
goal_city = "Karachi"

path, cost = a_star(graph, start_city, goal_city, heuristic)

print("A* path:", path)
print("Total cost:", cost)